%package org.uva.sea.ql.parser.jacc
%class QLParser
%interface QLTokens
%semantic org.uva.sea.ql.ast.ASTNode 
%start top 

%token <Int> INT
%token IDENT
%token '*' '/' '+' '-' OR AND NEQ EQ '<' LEQ '>' GEQ '!'
%token '(' ')'
%token <Identifier> IDENTIFIER
%token <Type> MONEY DATE INTEGER DECIMAL BOOLEAN
%token <String> LABEL


%left OR
%left AND
%left '>' '<' GEQ LEQ NEQ EQ
%left '+' '-'
%left '*' '/'
%left UMIN UPLUS UNOT

%type <ASTNode> astnode
%type <Form> form
%type <Question> question
%type <Expr> expr

%{
import org.uva.sea.ql.ast.expr.*;
%}

%%

 top : astnode {result = $1}
     ;

 astnode : form 
 		 ;
 
 form : Form IDENTIFIER '{' questions '}' {$$ = new Form{$2,$4};}
 	  ; 

 questions : questions question
 		   | question
 		   ;
 
 question : IDENTIFIER ':' LABEL type exprs {$$ = new Question{$1,$2,$3,$4}}
          ;
 
 type : MONEY | DATE | INT | DECIMAL | BOOLEAN;
 
 exprs : expr
 	   | /* empty */
 	   ;
 
 expr	 : '+' expr	%prec UPLUS { $$ = new Pos($2); }
		 | '-' expr	%prec UMIN  { $$ = new Neg($2); }
		 | '!' expr %prec UNOT  { $$ = new Not($2); }
		 | expr '*' expr		{ $$ = new Mul($1, $3); }
		 | expr '/' expr 		{ $$ = new Div($1, $3); }
		 | expr '+' expr		{ $$ = new Add($1, $3); }
		 | expr '-' expr		{ $$ = new Sub($1, $3); }
		 | expr EQ expr		    { $$ = new Eq($1, $3); }
		 | expr NEQ expr		{ $$ = new NEq($1, $3); }
		 | expr '>' expr		{ $$ = new GT($1, $3); }
		 | expr '<' expr		{ $$ = new LT($1, $3); }
		 | expr GEQ expr		{ $$ = new GEq($1, $3); }
		 | expr LEQ expr		{ $$ = new LEq($1, $3); }
		 | expr AND expr	    { $$ = new And($1, $3); }
	     | expr OR expr  		{ $$ = new Or($1, $3); }
		 | INT					{ $$ = $1; }
		 | IDENT         		{ $$ = $1; }
		 | '(' expr ')'			{ $$ = $2; }
		 ;
		 

%%
private QLLexer lexer; 

private Expr result;

public Expr getResult() {
  return result;
}

public QLParser(QLLexer lexer) { 
  this.lexer = lexer; 
}

private void yyerror(String msg) { 
  System.err.println(msg); 
}